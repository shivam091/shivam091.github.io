<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://shivam091.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://shivam091.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-07-09T14:46:55+05:30</updated><id>https://shivam091.github.io/feed.xml</id><title type="html">Harshal LADHE</title><subtitle>Software Engineer | Freelancer | Learner</subtitle><author><name>Harshal LADHE</name><email>harshal.ladhe.1@gmail.com</email></author><entry><title type="html">Getting Started with CSS Grid: A Beginner’s Guide to 2D Layouts</title><link href="https://shivam091.github.io/post/getting-started-with-css-grid" rel="alternate" type="text/html" title="Getting Started with CSS Grid: A Beginner’s Guide to 2D Layouts" /><published>2025-07-09T14:45:00+05:30</published><updated>2025-07-09T14:46:19+05:30</updated><id>https://shivam091.github.io/post/getting-started-with-css-grid</id><content type="html" xml:base="https://shivam091.github.io/post/getting-started-with-css-grid"><![CDATA[<h2 id="the-power-of-css-grid-for-layouts" dir="auto">The Power of CSS Grid for Layouts</h2>

<p dir="auto">Modern web layouts are more dynamic and complex than ever. Whether it’s a blog, dashboard, or product grid, developers need layout systems that are both powerful and easy to use.</p>

<p dir="auto">That’s where <strong>CSS Grid</strong> shines. Unlike Flexbox, which works in only one direction at a time, CSS Grid enables true two-dimensional layouts — rows and columns — without extra hacks or hassles.</p>

<p dir="auto">This is the first post in a three-part series where we’ll break down CSS Grid from the ground up. You’ll learn the core concepts, understand key terminology, and build your first layout from scratch.</p>

<p dir="auto">By the end of this post, you’ll be able to:</p>

<ul dir="auto">
  <li>Define a grid container and grid items</li>
  <li>Set up column and row templates</li>
  <li>Use fractional units and spacing with <code class="highlighter-rouge notranslate">gap</code></li>
  <li>Build simple, scalable 2D layouts</li>
</ul>

<p dir="auto">Let’s dive in.</p>

<h2 id="why-css-grid" dir="auto">Why CSS Grid?</h2>

<p dir="auto">Modern websites demand layout techniques that are <strong>flexible</strong>, <strong>responsive</strong>, and <strong>easy to maintain</strong>. Before Grid, developers relied on:</p>

<ul dir="auto">
  <li><code class="highlighter-rouge notranslate">float</code>, <code class="highlighter-rouge notranslate">inline-block</code>, or table-based layouts,</li>
  <li>JavaScript (or jQuery) to measure and equalize heights,</li>
  <li>Flexbox for 1D layouts, which wasn’t always ideal for grid-like structures.</li>
</ul>

<p dir="auto">But none of these offered full control over <strong>2D layouts</strong>.</p>

<p dir="auto">That’s where <strong>CSS Grid</strong> shines. Here’s why it’s a game changer:</p>

<h3 id="two-dimensional-power" dir="auto">Two-Dimensional Power</h3>

<p dir="auto"><strong>Flexbox</strong> handles layout in <strong>one direction</strong> at a time — rows or columns. But <strong>CSS Grid</strong> enables layouts in <strong>both axes simultaneously</strong>.</p>

<p dir="auto"><strong>Use case examples:</strong></p>

<ul dir="auto">
  <li>Product galleries</li>
  <li>Dashboards</li>
  <li>Magazine-style articles</li>
  <li>Calendars</li>
  <li>Full-page app layouts</li>
</ul>

<h3 id="declarative-clean-predictable" dir="auto">Declarative, Clean, Predictable</h3>

<p dir="auto">You define what the layout <strong>should look like</strong>, not how elements get there.</p>

<div class="code-block" data-copy-code="">
  <div class="code-block-header" role="region" aria-labelledby="code-lang-label">
    <div class="code-block-button-group" aria-hidden="true">
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-close">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-minimize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-maximize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
    </div>
    <div class="code-lang" id="code-lang-label">
      <svg role="img" aria-hidden="true" focusable="false">
        <use href="/assets/img/sprite.svg#icon-code" />
      </svg>
      <span class="visually-hidden">Code language:</span>
      CSS
    </div>
    <div class="code-actions">
      <button type="button" class="btn btn-sm btn-toggle-lines" aria-label="Toggle line numbers" data-tooltip="Toggle line numbers">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-hash" />
        </svg>
      </button>
      <button type="button" class="btn btn-sm btn-copy" aria-label="Copy code" data-tooltip="Copy">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-copy" />
        </svg>
      </button>
    </div>
  </div>
  <figure class="highlight"><pre><code class="language-css" data-lang="css"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="nc">.grid</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">grid</span><span class="p">;</span>
  <span class="nl">grid-template-columns</span><span class="p">:</span> <span class="m">1fr</span> <span class="m">2fr</span> <span class="m">1fr</span><span class="p">;</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>
</div>

<p dir="auto">The code is <strong>descriptive</strong>, like a wireframe.</p>

<h3 id="layout-without-extra-markup" dir="auto">Layout Without Extra Markup</h3>

<p dir="auto">With floats or Flexbox, you often need wrapper <code class="highlighter-rouge notranslate">div</code>s, utility classes, or nesting. Grid reduces that. Your HTML becomes <strong>cleaner</strong>, while CSS handles layout logic in one place.</p>

<h3 id="built-in-layout-superpowers" dir="auto">Built-In Layout Superpowers</h3>

<p dir="auto">CSS Grid brings native support for layout patterns that once required complex CSS tricks—or even JavaScript—to implement.</p>

<ul dir="auto">
  <li>Gaps (<code class="highlighter-rouge notranslate">gap</code>, <code class="highlighter-rouge notranslate">row-gap</code>, <code class="highlighter-rouge notranslate">column-gap</code>)</li>
  <li>Auto item placement</li>
  <li>Item spanning (<code class="highlighter-rouge notranslate">grid-column</code>, <code class="highlighter-rouge notranslate">grid-row</code>)</li>
  <li>Template areas with <strong>named regions</strong></li>
  <li>Layered grid items</li>
</ul>

<h3 id="naturally-responsive" dir="auto">Naturally Responsive</h3>

<p dir="auto">CSS Grid thrives in responsive design. With units like:</p>

<ul dir="auto">
  <li><code class="highlighter-rouge notranslate">fr</code> (fraction of available space)</li>
  <li><code class="highlighter-rouge notranslate">minmax()</code></li>
  <li><code class="highlighter-rouge notranslate">auto-fit</code>, <code class="highlighter-rouge notranslate">auto-fill</code></li>
</ul>

<p dir="auto">…you can build layouts that <strong>adapt seamlessly</strong>, without needing extra breakpoints.</p>

<div class="code-block" data-copy-code="">
  <div class="code-block-header" role="region" aria-labelledby="code-lang-label">
    <div class="code-block-button-group" aria-hidden="true">
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-close">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-minimize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-maximize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
    </div>
    <div class="code-lang" id="code-lang-label">
      <svg role="img" aria-hidden="true" focusable="false">
        <use href="/assets/img/sprite.svg#icon-code" />
      </svg>
      <span class="visually-hidden">Code language:</span>
      CSS
    </div>
    <div class="code-actions">
      <button type="button" class="btn btn-sm btn-toggle-lines" aria-label="Toggle line numbers" data-tooltip="Toggle line numbers">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-hash" />
        </svg>
      </button>
      <button type="button" class="btn btn-sm btn-copy" aria-label="Copy code" data-tooltip="Copy">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-copy" />
        </svg>
      </button>
    </div>
  </div>
  <figure class="highlight"><pre><code class="language-css" data-lang="css"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="nt">grid-template-columns</span><span class="o">:</span> <span class="nt">repeat</span><span class="o">(</span><span class="nt">auto-fit</span><span class="o">,</span> <span class="nt">minmax</span><span class="o">(</span><span class="err">200</span><span class="nt">px</span><span class="o">,</span> <span class="err">1</span><span class="nt">fr</span><span class="o">));</span>
</pre></td></tr></tbody></table></code></pre></figure>
</div>

<p dir="auto">Try doing that with Flexbox alone 😅</p>

<blockquote dir="auto">
  <p dir="auto">Not sure what does <code class="highlighter-rouge notranslate">fr</code>, <code class="highlighter-rouge notranslate">auto-fit</code>, <code class="highlighter-rouge notranslate">minmax()</code>, or <code class="highlighter-rouge notranslate">auto-fill</code> mean?<br />
Don’t worry — we’ll cover all of these in depth in <strong><a href="/post/responsive-css-grid-layouts">Part 3 → Responsive CSS Grid Layouts: fr Units, minmax(), auto-fill, and auto-fit Explained</a></strong>.</p>
</blockquote>

<h3 id="component-friendly" dir="auto">Component-Friendly</h3>

<p dir="auto">In frameworks like React or Vue, <strong>Grid makes layout self-contained</strong> — no dependency on external wrappers or parents. It’s great for reusable components like:</p>

<ul dir="auto">
  <li>Cards</li>
  <li>Sidebars</li>
  <li>Media objects</li>
  <li>Complex page sections</li>
</ul>

<h2 id="grid-vs-flexbox-when-to-use-what" dir="auto">Grid vs. Flexbox: When to Use What?</h2>

<table dir="auto" role="table" class="markdown-table">
  <thead>
    <tr>
      <th>Scenario</th>
      <th style="text-align: center">Use Grid</th>
      <th style="text-align: center">Use Flexbox</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Page layout (header, sidebar, content)</td>
      <td style="text-align: center">✓</td>
      <td style="text-align: center">✗</td>
    </tr>
    <tr>
      <td>Navbar with links</td>
      <td style="text-align: center">✗</td>
      <td style="text-align: center">✓</td>
    </tr>
    <tr>
      <td>Gallery or card grid</td>
      <td style="text-align: center">✓</td>
      <td style="text-align: center">✗</td>
    </tr>
    <tr>
      <td>Single row of buttons</td>
      <td style="text-align: center">✗</td>
      <td style="text-align: center">✓</td>
    </tr>
    <tr>
      <td>Calendar or table layout</td>
      <td style="text-align: center">✓</td>
      <td style="text-align: center">✗</td>
    </tr>
  </tbody>
</table>

<blockquote dir="auto">
  <p dir="auto"><strong>Summary</strong>: Use <strong>flexbox</strong> for 1D layout (e.g., navbars, button groups) and use <strong>grid</strong> for 2D layout (e.g., pages, cards, dashboard panels)
and you can always combine them!</p>
</blockquote>

<details>
  <summary>When <em>not</em> to use CSS Grid?</summary>
  <ul>
    <li>If you just need a horizontal or vertical alignment — use Flexbox.</li>
    <li>If the layout is linear and small-scale (e.g. tag chips, breadcrumbs), Grid might be overkill.</li>
    <li>Old browser support? Flexbox may be safer. (Grid has great support though!)</li>
  </ul>
</details>

<h2 id="basic-terminology" dir="auto">Basic Terminology</h2>

<ul dir="auto">
  <li><strong>Grid Container:</strong> The parent element on which <code class="highlighter-rouge notranslate">display: grid</code> or <code class="highlighter-rouge notranslate">display: inline-grid</code> is applied. It defines the grid context for its children.</li>
  <li><strong>Grid Item:</strong> The direct child elements of the grid container. These are placed and aligned within the grid layout.</li>
  <li><strong>Grid Line:</strong> The horizontal or vertical dividing lines that separate grid tracks. They’re used for placing grid items.</li>
  <li><strong>Grid Track:</strong> A row or column in the grid. It’s the space between two adjacent grid lines.</li>
  <li><strong>Grid Cell:</strong> The smallest unit of a grid layout — the space at the intersection of a single row and column.</li>
</ul>

<h2 id="building-layouts-with-css-grid" dir="auto">Building Layouts with CSS Grid</h2>

<h3 id="fundamental-properties" dir="auto">Fundamental Properties</h3>

<ul dir="auto">
  <li><strong>display: grid;</strong> — Converts an element into a grid container, enabling grid-based layout for its direct children.</li>
  <li><strong>grid-template-columns</strong> — Defines the number and width of columns in the grid. You can specify fixed sizes, percentages, or use flexible units
like fr (fraction of available space).</li>
  <li><strong>grid-template-rows</strong> — Defines the number and height of rows in the grid, using the same unit options as columns.</li>
  <li><strong>gap (or row-gap and column-gap)</strong> — Sets the spacing between rows and columns of grid items. A shorthand that simplifies layout spacing.</li>
  <li><strong>grid-column / grid-row</strong> — Specifies how many columns or rows an item should span, or where it should start and end within the grid.</li>
</ul>

<h3 id="column-and-row-templates" dir="auto">Column and Row Templates</h3>

<p dir="auto">CSS Grid gives you precise control over your layout’s structure using the <code class="highlighter-rouge notranslate">grid-template-columns</code> and <code class="highlighter-rouge notranslate">grid-template-rows</code> properties.</p>

<ul dir="auto">
  <li><strong>grid-template-columns</strong> — Defines the number and width of columns in the grid.</li>
  <li><strong>grid-template-rows</strong> — Defines the number and height of rows.</li>
</ul>

<p dir="auto">Each value you specify represents the size of a single column or row, ordered left-to-right (for columns) or top-to-bottom (for rows). You can use:</p>

<ul dir="auto">
  <li>Flexible units like <code class="highlighter-rouge notranslate">fr</code> (fraction of available space),</li>
  <li>Fixed units like <code class="highlighter-rouge notranslate">px</code> or <code class="highlighter-rouge notranslate">em</code>,</li>
  <li>keywords like <code class="highlighter-rouge notranslate">auto</code>, which sizes based on content.</li>
</ul>

<blockquote dir="auto">
  <p dir="auto">💡 <strong>Tip:</strong> You can use <code class="highlighter-rouge notranslate">repeat()</code> in <code class="highlighter-rouge notranslate">grid-template-columns</code> to reduce repetition: <code class="highlighter-rouge notranslate">repeat(3, 1fr)</code></p>
</blockquote>

<p dir="auto">Here’s an example:</p>

<div class="code-block" data-copy-code="">
  <div class="code-block-header" role="region" aria-labelledby="code-lang-label">
    <div class="code-block-button-group" aria-hidden="true">
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-close">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-minimize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-maximize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
    </div>
    <div class="code-lang" id="code-lang-label">
      <svg role="img" aria-hidden="true" focusable="false">
        <use href="/assets/img/sprite.svg#icon-code" />
      </svg>
      <span class="visually-hidden">Code language:</span>
      CSS
    </div>
    <div class="code-actions">
      <button type="button" class="btn btn-sm btn-toggle-lines" aria-label="Toggle line numbers" data-tooltip="Toggle line numbers">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-hash" />
        </svg>
      </button>
      <button type="button" class="btn btn-sm btn-copy" aria-label="Copy code" data-tooltip="Copy">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-copy" />
        </svg>
      </button>
    </div>
  </div>
  <figure class="highlight"><pre><code class="language-css" data-lang="css"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="nc">.grid</span> <span class="p">{</span>
  <span class="nl">display</span><span class="p">:</span> <span class="nb">grid</span><span class="p">;</span>
  <span class="nl">grid-template-columns</span><span class="p">:</span> <span class="m">1fr</span> <span class="m">2fr</span> <span class="m">1fr</span><span class="p">;</span> <span class="c">/* Three columns: middle column is twice as wide */</span>
  <span class="nl">grid-template-rows</span><span class="p">:</span> <span class="m">150px</span> <span class="nb">auto</span> <span class="m">75px</span><span class="p">;</span> <span class="c">/* Three rows: fixed top &amp; bottom, flexible middle */</span>
  <span class="nl">gap</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
<span class="p">}</span>

<span class="nc">.item</span> <span class="p">{</span>
  <span class="nl">padding</span><span class="p">:</span> <span class="m">1rem</span><span class="p">;</span>
  <span class="nl">border</span><span class="p">:</span> <span class="m">1px</span> <span class="nb">solid</span> <span class="nx">#000</span>
<span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>
</div>

<p dir="auto">Here’s the HTML structure:</p>

<div class="code-block" data-copy-code="">
  <div class="code-block-header" role="region" aria-labelledby="code-lang-label">
    <div class="code-block-button-group" aria-hidden="true">
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-close">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-minimize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-maximize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
    </div>
    <div class="code-lang" id="code-lang-label">
      <svg role="img" aria-hidden="true" focusable="false">
        <use href="/assets/img/sprite.svg#icon-code" />
      </svg>
      <span class="visually-hidden">Code language:</span>
      HTML
    </div>
    <div class="code-actions">
      <button type="button" class="btn btn-sm btn-toggle-lines" aria-label="Toggle line numbers" data-tooltip="Toggle line numbers">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-hash" />
        </svg>
      </button>
      <button type="button" class="btn btn-sm btn-copy" aria-label="Copy code" data-tooltip="Copy">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-copy" />
        </svg>
      </button>
    </div>
  </div>
  <figure class="highlight"><pre><code class="language-html" data-lang="html"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"grid"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 1<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 2<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 3<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 4<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 5<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 6<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 7<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 8<span class="nt">&lt;/div&gt;</span>
  <span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"item"</span><span class="nt">&gt;</span>Item 9<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;/div&gt;</span>
</pre></td></tr></tbody></table></code></pre></figure>
</div>

<p dir="auto"><strong>Explanation:</strong></p>

<ul dir="auto">
  <li>
    <p dir="auto">The grid has three columns: the first and third are equal in width, while the middle column is twice as wide.</p>
  </li>
  <li>
    <p dir="auto">The rows are defined as:</p>
    <ul dir="auto">
      <li><code class="highlighter-rouge notranslate">150px</code> → a fixed-height top row</li>
      <li><code class="highlighter-rouge notranslate">auto</code> → a middle row that adjusts to content</li>
      <li><code class="highlighter-rouge notranslate">75px</code> → a fixed-height footer row</li>
    </ul>
  </li>
</ul>

<p dir="auto">This layout gives you both <strong>predictability</strong> and <strong>flexibility</strong>, especially when paired with responsive design techniques.</p>

<p dir="auto">👉 <a href="https://codepen.io/shivam091/pen/raVEvMb" target="_blank" rel="noopener noreferrer nofollow" aria-label="External link to https://codepen.io/shivam091/pen/raVEvMb" class="external-link">Try this on CodePen</a></p>

<h2 id="frequently-asked-questions-faq" dir="auto">Frequently Asked Questions (FAQ)</h2>

<h3 id="when-should-i-use-grid-over-flexbox" dir="auto">When should I use Grid over Flexbox?</h3>

<p dir="auto">Use <strong>CSS Grid</strong> when:</p>
<ul dir="auto">
  <li>You need both rows and columns (2D layout).</li>
  <li>You want consistent alignment across an entire section or page.</li>
  <li>You’re building full-page layouts, dashboards, or card grids.</li>
</ul>

<p dir="auto">Use <strong>Flexbox</strong> when:</p>
<ul dir="auto">
  <li>You’re arranging items in a single row or column.</li>
  <li>You need precise content alignment or small-scale layout logic.</li>
</ul>

<hr />

<h3 id="is-css-grid-responsive" dir="auto">Is CSS Grid responsive?</h3>

<p dir="auto">Absolutely! Grid works beautifully with:</p>
<ul dir="auto">
  <li>Units like <code class="highlighter-rouge notranslate">fr</code>, <code class="highlighter-rouge notranslate">auto</code>, and <code class="highlighter-rouge notranslate">minmax()</code></li>
  <li>Functions like <code class="highlighter-rouge notranslate">auto-fit</code> and <code class="highlighter-rouge notranslate">auto-fill</code></li>
  <li>Media queries and even container queries</li>
</ul>

<blockquote dir="auto">
  <p dir="auto">📌 <strong>Tip:</strong> We’ll explore responsive Grid techniques in depth in <a href="/post/responsive-css-grid-layouts">Part 3 → Responsive CSS Grid Layouts: fr Units, minmax(), auto-fill, and auto-fit Explained</a>.</p>
</blockquote>

<hr />

<h3 id="does-css-grid-work-in-all-browsers" dir="auto">Does CSS Grid work in all browsers?</h3>

<p dir="auto">✅ <strong>Yes</strong>, all modern browsers fully support CSS Grid.<br />
⚠️ <strong>IE11</strong> supports an older version, but it’s largely deprecated and not recommended for new projects.</p>

<h2 id="conclusion" dir="auto">Conclusion</h2>

<p dir="auto">🎉 Congratulations — you’ve just taken your first steps into the world of CSS Grid!</p>

<p dir="auto">In this post, you learned:</p>
<ul dir="auto">
  <li>What makes CSS Grid different from other layout systems</li>
  <li>Essential terminology like containers, items, and tracks</li>
  <li>How to define column and row templates using flexible units</li>
  <li>How to build your first working 2D layout</li>
</ul>

<p dir="auto">This foundation will serve you well as we move forward.</p>

<p dir="auto">🔗 <strong>Up Next (Part 2):</strong> <a href="/post/mastering-css-grid">Mastering CSS Grid: Grid Areas, Item Alignment, and Spanning</a> — where we dive deeper into layout techniques that let you place, span, and align items precisely.</p>

<p dir="auto">📚 This post is <strong>part 1</strong> of the <a href="/series/css-grid-fundamentals">CSS Grid Fundamentals</a> series.</p>]]></content><author><name>Harshal Ladhe</name></author><category term="css" /><category term="beginner" /><category term="layout" /><category term="css" /><category term="grid" /><category term="css-grid" /><category term="layout" /><category term="web design" /><category term="frontend" /><category term="2d-layouts" /><summary type="html"><![CDATA[A beginner-friendly introduction to CSS Grid that covers core concepts and guides you through building your first 2D layouts with real-world examples.]]></summary></entry><entry><title type="html">Components</title><link href="https://shivam091.github.io/post/components" rel="alternate" type="text/html" title="Components" /><published>2025-06-16T18:20:00+05:30</published><updated>2025-07-06T19:48:55+05:30</updated><id>https://shivam091.github.io/post/components</id><content type="html" xml:base="https://shivam091.github.io/post/components"><![CDATA[<h2 id="codeblocks" dir="auto">Codeblocks</h2>

<div class="code-block" data-copy-code="">
  <div class="code-block-header" role="region" aria-labelledby="code-lang-label">
    <div class="code-block-button-group" aria-hidden="true">
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-close">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-minimize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
      <svg role="img" aria-hidden="true" focusable="false" class="code-block-action code-maximize">
        <use href="/assets/img/sprite.svg#icon-circle-fill" />
      </svg>
    </div>
    <div class="code-lang" id="code-lang-label">
      <svg role="img" aria-hidden="true" focusable="false">
        <use href="/assets/img/sprite.svg#icon-code" />
      </svg>
      <span class="visually-hidden">Code language:</span>
      Ruby
    </div>
    <div class="code-actions">
      <button type="button" class="btn btn-sm btn-toggle-lines" aria-label="Toggle line numbers" data-tooltip="Toggle line numbers">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-hash" />
        </svg>
      </button>
      <button type="button" class="btn btn-sm btn-copy" aria-label="Copy code" data-tooltip="Copy">
        <svg role="img" aria-hidden="true" focusable="false">
          <use href="/assets/img/sprite.svg#icon-copy" />
        </svg>
      </button>
    </div>
  </div>
  <figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
</pre></td><td class="code"><pre><span class="c1"># Gemfile</span>
<span class="n">gem</span> <span class="s1">'httparty'</span>

<span class="c1"># app/services/weather_api.rb</span>
<span class="nb">require</span> <span class="s1">'httparty'</span>

<span class="k">class</span> <span class="nc">WeatherApi</span>
  <span class="no">API_KEY</span> <span class="o">=</span> <span class="s1">'your_api_key'</span>
  <span class="no">BASE_URL</span> <span class="o">=</span> <span class="s1">'https://api.openweathermap.org/data/2.5/weather'</span>

  <span class="k">def</span> <span class="nf">fetch_weather</span><span class="p">(</span><span class="n">city</span><span class="p">)</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="no">BASE_URL</span><span class="si">}</span><span class="s2">?q=</span><span class="si">#{</span><span class="n">city</span><span class="si">}</span><span class="s2">&amp;appid=</span><span class="si">#{</span><span class="no">API_KEY</span><span class="si">}</span><span class="s2">&amp;units=metric"</span>
    <span class="n">response</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="k">raise</span> <span class="s2">"API Error: </span><span class="si">#{</span><span class="n">response</span><span class="p">.</span><span class="nf">code</span><span class="si">}</span><span class="s2">"</span> <span class="k">unless</span> <span class="n">response</span><span class="p">.</span><span class="nf">success?</span>
    <span class="n">response</span><span class="p">.</span><span class="nf">parsed_body</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># app/controllers/weather_controller.rb</span>
<span class="k">def</span> <span class="nf">show</span>
  <span class="n">city</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:city</span><span class="p">]</span>
  <span class="n">weather_data</span> <span class="o">=</span> <span class="no">WeatherApi</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">fetch_weather</span><span class="p">(</span><span class="n">city</span><span class="p">)</span>
  <span class="vi">@temperature</span> <span class="o">=</span> <span class="n">weather_data</span><span class="p">[</span><span class="s1">'main'</span><span class="p">][</span><span class="s1">'temp'</span><span class="p">]</span>
<span class="k">end</span>
</pre></td></tr></tbody></table></code></pre></figure>
</div>

<h2 id="alerts" dir="auto">Alerts</h2>

<h3 id="default" dir="auto">Default</h3>

<div class="alert alert-accent" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-info-circle" />
</svg>

  </div>
  <div class="alert-content">
    This is default alert.
  </div>
  
</div>

<h3 id="with-icon-heading-and-dismiss" dir="auto">With icon, heading, and dismiss</h3>

<div class="alert alert-accent alert-dismissible" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-info-circle" />
</svg>

  </div>
  <div class="alert-content">
    <div class="alert-heading">Information</div>
This is just for your information.
  </div>
  <button type="button" class="alert-dismiss" aria-label="Dismiss">
  <svg role="img" aria-hidden="true" focusable="false">
    <use href="/assets/img/sprite.svg#icon-times" />
  </svg>
</button>

</div>

<div class="alert alert-success alert-dismissible" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-bulb" />
</svg>

  </div>
  <div class="alert-content">
    <div class="alert-heading">Heads Up!</div>
Your profile has been updated successfully.
  </div>
  <button type="button" class="alert-dismiss" aria-label="Dismiss">
  <svg role="img" aria-hidden="true" focusable="false">
    <use href="/assets/img/sprite.svg#icon-times" />
  </svg>
</button>

</div>

<div class="alert alert-danger alert-dismissible" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-times" />
</svg>

  </div>
  <div class="alert-content">
    <div class="alert-heading">Error :(</div>
Failed to save your changes. Please try again.
  </div>
  <button type="button" class="alert-dismiss" aria-label="Dismiss">
  <svg role="img" aria-hidden="true" focusable="false">
    <use href="/assets/img/sprite.svg#icon-times" />
  </svg>
</button>

</div>

<div class="alert alert-attention alert-dismissible" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-exclamation-triangle" />
</svg>

  </div>
  <div class="alert-content">
    <div class="alert-heading">Attention</div>
This action requires confirmation.
  </div>
  <button type="button" class="alert-dismiss" aria-label="Dismiss">
  <svg role="img" aria-hidden="true" focusable="false">
    <use href="/assets/img/sprite.svg#icon-times" />
  </svg>
</button>

</div>

<h3 id="with-icon-outline-and-dismiss" dir="auto">With icon, outline, and dismiss</h3>

<div class="alert alert-accent alert-dismissible alert-outlined" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-info-circle" />
</svg>

  </div>
  <div class="alert-content">
    An example outlined accent alert with an icon.
  </div>
  <button type="button" class="alert-dismiss" aria-label="Dismiss">
  <svg role="img" aria-hidden="true" focusable="false">
    <use href="/assets/img/sprite.svg#icon-times" />
  </svg>
</button>

</div>

<div class="alert alert-success alert-dismissible alert-outlined" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-bulb" />
</svg>

  </div>
  <div class="alert-content">
    An example outlined success alert with an icon.
  </div>
  <button type="button" class="alert-dismiss" aria-label="Dismiss">
  <svg role="img" aria-hidden="true" focusable="false">
    <use href="/assets/img/sprite.svg#icon-times" />
  </svg>
</button>

</div>

<div class="alert alert-danger alert-dismissible alert-outlined" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-times" />
</svg>

  </div>
  <div class="alert-content">
    An example outlined danger alert with an icon.
  </div>
  <button type="button" class="alert-dismiss" aria-label="Dismiss">
  <svg role="img" aria-hidden="true" focusable="false">
    <use href="/assets/img/sprite.svg#icon-times" />
  </svg>
</button>

</div>

<div class="alert alert-attention alert-dismissible alert-outlined" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-exclamation-triangle" />
</svg>

  </div>
  <div class="alert-content">
    An example outlined attention alert with an icon.
  </div>
  <button type="button" class="alert-dismiss" aria-label="Dismiss">
  <svg role="img" aria-hidden="true" focusable="false">
    <use href="/assets/img/sprite.svg#icon-times" />
  </svg>
</button>

</div>

<h3 id="with-links" dir="auto">With links</h3>

<div class="alert alert-accent" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-info-circle" />
</svg>

  </div>
  <div class="alert-content">
    <div class="alert-heading">Information</div>
This is an <a href="#">important notification</a> that requires your attention.
You can <a href="/settings">update your settings here</a>.
An example showing the <code class="language-plaintext highlighter-rouge">warning</code> type prompt.
  </div>
  
</div>

<h3 id="markdown-support" dir="auto">Markdown support</h3>

<div class="alert alert-danger" role="alert" aria-live="polite" tabindex="0">
  <div class="alert-icon">
    <svg role="img" aria-hidden="true" focusable="false">
  <use href="/assets/img/sprite.svg#icon-times" />
</svg>

  </div>
  <div class="alert-content">
    <h3 class="alert-heading" id="markdown-enabled-alert">Markdown enabled alert</h3>

<p>This content is <strong>processed</strong> as <em>Markdown</em>.</p>

  </div>
  
</div>

<h2 id="icons" dir="auto">Icons</h2>

<svg id="custom-id" class="icon icon-folder-open custom-class" width="20" height="20" role="img" aria-label="Open folder" focusable="false">
  <use href="/assets/img/sprite.svg#icon-folder-open" />
</svg>]]></content><author><name>Harshal Ladhe</name></author><category term="blogging" /><category term="components" /><category term="typography" /><category term="design" /><category term="styleguide" /><summary type="html"><![CDATA[This post is a comprehensive test of various components. It includes alerts, code blocks, buttons, and more.]]></summary></entry><entry><title type="html">Text and Typography</title><link href="https://shivam091.github.io/post/typography" rel="alternate" type="text/html" title="Text and Typography" /><published>2025-05-31T01:00:00+05:30</published><updated>2025-07-09T12:24:30+05:30</updated><id>https://shivam091.github.io/post/typography</id><content type="html" xml:base="https://shivam091.github.io/post/typography"><![CDATA[<h2 id="headings" dir="auto">Headings</h2>

<h1 id="h1-heading-usually-reserved-for-post-title" dir="auto">H1 Heading (usually reserved for post title)</h1>
<h2 id="h2-heading" dir="auto">H2 Heading</h2>
<h3 id="h3-heading" dir="auto">H3 Heading</h3>
<h4 id="h4-heading" dir="auto">H4 Heading</h4>
<h5 id="h5-heading" dir="auto">H5 Heading</h5>
<h6 id="h6-heading" dir="auto">H6 Heading</h6>

<h2 id="paragraphs" dir="auto">Paragraphs</h2>

<p dir="auto">Lorem ipsum dolor sit amet, <strong>consectetur</strong> adipiscing elit. Nulla <em>vehicula</em>, <code class="highlighter-rouge notranslate">inline code</code>, <a href="https://example.com" target="_blank" rel="noopener noreferrer nofollow" aria-label="External link to https://example.com" class="external-link">external link</a>, and a line break:<br />
New line here.</p>

<h2 id="blockquote" dir="auto">Blockquote</h2>

<blockquote dir="auto">
  <p dir="auto">“Design is not just what it looks like and feels like. Design is how it works.”<br />
— <em>Steve Jobs</em></p>
</blockquote>

<h2 id="links" dir="auto">Links</h2>

<p dir="auto"><a href="https://example.com" target="_blank" rel="noopener noreferrer nofollow" aria-label="External link to https://example.com" class="external-link">External Link</a><br />
<a href="/about/">Internal Link</a><br />
Mailto: <a href="mailto:test@example.com">Send Email</a></p>

<h2 id="lists" dir="auto">Lists</h2>

<h3 id="unordered-list" dir="auto">Unordered List</h3>

<ul dir="auto">
  <li>Chapter 1
    <ul dir="auto">
      <li>Section 1
        <ul dir="auto">
          <li>Paragraph 1</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>Chapter 2
    <ul dir="auto">
      <li>Section 2</li>
    </ul>
  </li>
</ul>

<h3 id="ordered-list" dir="auto">Ordered List</h3>

<ol dir="auto">
  <li>First item</li>
  <li>Second item
    <ol dir="auto">
      <li>Nested
        <ol dir="auto">
          <li>Nested again</li>
        </ol>
      </li>
    </ol>
  </li>
  <li>Third item</li>
</ol>

<h3 id="task-list" dir="auto">Task List</h3>

<ul class="task-list" dir="auto">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Job
    <ul class="task-list" dir="auto">
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Step 1</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" />Step 2</li>
      <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" />Step 3</li>
    </ul>
  </li>
</ul>

<h3 id="description-lists" dir="auto">Description Lists</h3>
<dl>
  <dt>Sun</dt>
  <dd>the star around which the earth orbits</dd>
  <dt>Moon</dt>
  <dd>the natural satellite of the earth, visible by reflected light from the sun</dd>
</dl>

<h2 id="inline-elements" dir="auto">Inline Elements</h2>

<p dir="auto"><strong>bold text</strong>,
<em>italic text</em>,
<code class="highlighter-rouge notranslate">code</code>,
<del>strikethrough</del>,
<u>underlined</u>,
<small>small text</small>
<mark>highlighted</mark> text.
<abbr title="attribute">attr</abbr></p>

<h2 id="code-blocks" dir="auto">Code Blocks</h2>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># Gemfile</span>
<span class="n">gem</span> <span class="s1">'httparty'</span>

<span class="c1"># app/services/weather_api.rb</span>
<span class="nb">require</span> <span class="s1">'httparty'</span>

<span class="k">class</span> <span class="nc">WeatherApi</span>
  <span class="no">API_KEY</span> <span class="o">=</span> <span class="s1">'your_api_key'</span>
  <span class="no">BASE_URL</span> <span class="o">=</span> <span class="s1">'https://api.openweathermap.org/data/2.5/weather'</span>

  <span class="k">def</span> <span class="nf">fetch_weather</span><span class="p">(</span><span class="n">city</span><span class="p">)</span>
    <span class="n">url</span> <span class="o">=</span> <span class="s2">"</span><span class="si">#{</span><span class="no">BASE_URL</span><span class="si">}</span><span class="s2">?q=</span><span class="si">#{</span><span class="n">city</span><span class="si">}</span><span class="s2">&amp;appid=</span><span class="si">#{</span><span class="no">API_KEY</span><span class="si">}</span><span class="s2">&amp;units=metric"</span>
    <span class="n">response</span> <span class="o">=</span> <span class="no">HTTParty</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>
    <span class="k">raise</span> <span class="s2">"API Error: </span><span class="si">#{</span><span class="n">response</span><span class="p">.</span><span class="nf">code</span><span class="si">}</span><span class="s2">"</span> <span class="k">unless</span> <span class="n">response</span><span class="p">.</span><span class="nf">success?</span>
    <span class="n">response</span><span class="p">.</span><span class="nf">parsed_body</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="c1"># app/controllers/weather_controller.rb</span>
<span class="k">def</span> <span class="nf">show</span>
  <span class="n">city</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="ss">:city</span><span class="p">]</span>
  <span class="n">weather_data</span> <span class="o">=</span> <span class="no">WeatherApi</span><span class="p">.</span><span class="nf">new</span><span class="p">.</span><span class="nf">fetch_weather</span><span class="p">(</span><span class="n">city</span><span class="p">)</span>
  <span class="vi">@temperature</span> <span class="o">=</span> <span class="n">weather_data</span><span class="p">[</span><span class="s1">'main'</span><span class="p">][</span><span class="s1">'temp'</span><span class="p">]</span>
<span class="k">end</span></code></pre></figure>

<p dir="auto">Inline <code class="highlighter-rouge notranslate">console.log("Hi")</code> inside text.</p>

<h2 id="details--summary" dir="auto">Details / Summary</h2>

<details>
  <summary>Click to expand</summary>
  <p>This is hidden content revealed with HTML <code>&lt;details&gt;</code> and <code>&lt;summary&gt;</code> tags.</p>
</details>

<h2 id="figures-and-images" dir="auto">Figures and Images</h2>

<h3 id="image-with-caption" dir="auto">Image with Caption</h3>

<figure>
  <img src="https://via.placeholder.com/600x200" alt="Example Image" />
  <figcaption>This is a caption below the image.</figcaption>
</figure>

<h3 id="simple-image" dir="auto">Simple Image</h3>

<p dir="auto"><img src="https://via.placeholder.com/400x200" alt="Alt text" /></p>

<h2 id="tables" dir="auto">Tables</h2>

<table dir="auto" role="table" class="markdown-table">
  <thead>
    <tr>
      <th style="text-align: right">Feature</th>
      <th style="text-align: center">Supported</th>
      <th style="text-align: left">Notes</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: right">Tables</td>
      <td style="text-align: center">✅</td>
      <td style="text-align: left">Markdown &amp; HTML</td>
    </tr>
    <tr>
      <td style="text-align: right">GFM</td>
      <td style="text-align: center">✅</td>
      <td style="text-align: left">Supported on GitHub</td>
    </tr>
    <tr>
      <td style="text-align: right">Footnotes</td>
      <td style="text-align: center">✅</td>
      <td style="text-align: left">In Markdown config</td>
    </tr>
  </tbody>
</table>

<h2 id="filepath" dir="auto">Filepath</h2>

<p dir="auto">Here is the <code class="filepath highlighter-rouge notranslate">/path/to/the/file.extend</code>.</p>

<h2 id="footnotes" dir="auto">Footnotes</h2>

<p dir="auto">This sentence has a footnote.
          <sup id="fnref:1">
            <a href="#fn:1" class="footnote" rel="footnote" role="doc-noteref" aria-describedby="footnote-label">1</a>
          </sup>
        </p>

<p dir="auto">This sentence has an another footnote.
          <sup id="fnref:2">
            <a href="#fn:2" class="footnote" rel="footnote" role="doc-noteref" aria-describedby="footnote-label">2</a>
          </sup>
        </p>

<h2 id="misc-elements" dir="auto">Misc elements</h2>

<p dir="auto"><strong>Abbreviation:</strong><br />
The abbreviation for HyperText Markup Language is <abbr title="HyperText Markup Language">HTML</abbr>.</p>

<p dir="auto"><strong>Keyboard Input:</strong><br />
To save, press <kbd>Ctrl</kbd> + <kbd>S</kbd>.</p>

<p dir="auto"><strong>Subscript/Superscript:</strong><br />
H<sub>2</sub>O and E = mc<sup>2</sup></p>

<p dir="auto"><strong>Time Tag:</strong><br />
<time datetime="2025-05-31">May 31, 2025</time></p>
<section class="footnotes" role="doc-endnotes" dir="auto">

          <h2 id="footnote-label" class="visually-hidden" dir="auto">Footnotes</h2>
          <ol class="footnote-list" dir="auto">
  <li id="fn:1" class="footnote-list-item">
    <p dir="auto">This is the footnote content.&nbsp;
            <a href="#fnref:1" class="reverse-footnote" aria-label="Back to reference 1" role="doc-backlink">↩</a>
          </p>
  </li>
  <li id="fn:2" class="footnote-list-item">
    <p dir="auto">This is the another footnote content.&nbsp;
            <a href="#fnref:2" class="reverse-footnote" aria-label="Back to reference 2" role="doc-backlink">↩</a>
          </p>
  </li>
  </ol>
</section>]]></content><author><name>Harshal Ladhe</name></author><category term="blogging" /><category term="typography" /><category term="typography" /><category term="design" /><category term="styleguide" /><summary type="html"><![CDATA[This post is a comprehensive test of various HTML elements. It includes headings, paragraphs, lists, tables, forms, code, and more.]]></summary></entry></feed>